language: "ja"
early_access: false
reviews:
    request_changes_workflow: false
    high_level_summary: true
    poem: true
    review_status: true
    collapse_walkthrough: false
    path_filters:
        - "!**/.xml"
    path_instructions:
        - path: "**/*.js"
          instructions: "|
              JavaScript コードが Google JavaScript スタイルガイドに準拠しているかレビューし、逸脱があれば指摘してください。また、以下の点にも注意してください。
              - ES6以降の構文が適切に使用されているか。
              - コードがクリーンで読みやすいか。
              - 関数や変数の命名が明確かつ一貫性があるか。
              - 不要なコードやコメントアウトされたコードが残っていないか。
              "
        - path: "**/*.vue"
          instructions: "|
              vue ファイルのルートタグに従って、以下の通りレビュー観点を追加してください.

              ファイル全体
                - 行数が多い (コメント行を含まずに 300 行を超える) 場合、分割可能かどうかの観点をレビューに含め、可能であれば、指摘してください.

              <script> タグ
                - Google の JavaScript style guide に従ってレビューし、不具合あれば指摘してください.
                - Mixin, Filter の使用を非推奨とします.
                - Options API のコンポーネントは、順次 Composition API に移行していきます.
                - SSR, CSR の両方で適切に処理されることをレビューの観点に追加してください.

              <template> タグ
                - 適切な HTML タグの使用をレビューしてください.
                - div や span の深い階層構造は非推奨とし、別案があれば指摘してください.
                - 基本的には、テンプレートに js のロジックを書かず、 computed や methods などを使うように指示してください.
                - v-for のネストを非推奨とします.
                - v-for の key に index を使用することを非推奨とします. ただし、そうせざるを得ないケースもあるため、強制はしません.
                - v-if と v-for を同じエレメントに同時に記載することを非推奨とします.
                - vue filter の使用を非推奨とします.
                - 多言語対応のため、静的なテキストはかならず `$t` `$tc` `$d` `$n` などの vue-i18n 標準の関数を使用することを推奨します.
                ただし、独自に実装した多言語対応用関数 `$twr` `$tw` `$tp` `$tl` の 4 種を非推奨とします.
                - 多言語対応のため、表示テキストを結合する処理を非推奨とします。例として、`'月' + '曜日'` とすると翻訳できません。

              <style> タグ
                - scoped style, moduled style の使用を推奨します.
                - deep, global スタイルの適用を非推奨とします.
                - 基本的に、コンポーネント内に閉じた範囲でスタイルが適用されていることをレビューしてください。
            "
        - path: "**/*.php"
          instructions: "|
              Laravel ファイルのレビュー観点を以下の通り追加してください。

              全体
                - PSR-12 コーディング標準に従っているか確認してください。
                - クラス、メソッド、変数の命名が明確かつ一貫性があるかレビューしてください。
                - Laravelのベストプラクティスに従っているか、特にモデル、ビュー、コントローラーの責務の分離が適切に行われているか確認してください。

              モデル
                - Eloquent モデルのリレーション定義が適切かどうか確認してください。
                - マスアサインメントの保護（fillable または guarded プロパティの使用）が適切に設定されているか確認してください。

              コントローラー
                - ビジネスロジックがコントローラーに過剰に集中していないか、適切にサービスクラスやリポジトリクラスに委譲されているか確認してください。
                - リクエストのバリデーションが適切に行われているか、Form Request クラスの使用を推奨します。

              ビュー
                - Blade テンプレートが適切に使用されているか、データの表示には{{ }}を使い、XSS攻撃を防ぐために適切なエスケープが行われているか確認してください。
                - コンポーネントとスロットを活用してビューの再利用性を高めているか確認してください。

              ルーティング
                - ルート定義がRESTfulな設計に従っているか、またはLaravelのリソースコントローラーを適切に使用しているか確認してください。
                - ミドルウェアを使用して認証、認可、その他の前処理が適切に行われているか確認してください。

              テスト
                - PHPUnit を使用したテストが適切に書かれており、アプリケーションの主要な機能をカバーしているか確認してください。
                - フィーチャーテストとユニットテストの適切なバランスが取れているか確認してください。

              データベース
                - マイグレーションとシーダーが適切に使用されているか確認してください。
                - N+1 問題を引き起こす可能性のあるクエリがないか、Eloquentのリレーションを適切に使用しているか確認してください。

              その他
                - .env ファイルや設定ファイルを使用して、環境に依存する設定がハードコードされていないか確認してください。
                - パフォーマンスやセキュリティに関する懸念がないか、特にデータベースクエリや外部APIの呼び出しに注意してレビューしてください。
            "
    auto_review:
        enabled: true
        ignore_title_keywords:
            - "WIP"
            - "DO NOT MERGE"
        drafts: true
        base_branches:
            - "develop"
            - "master"
            - "feature/.*"
            - "hotfix/.*"
            - "release/.*"
            - "refactor/.*"
chat:
    auto_reply: true
